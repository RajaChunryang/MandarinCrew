from pyrogram.errors import MessageNotModified
from pyrogram.types import (InlineKeyboardButton, InlineQueryResultArticle,
                            InputTextMessageContent)

from PyroUbot import *


class Button:
    def admin():
        menu_button = [
            [
                InlineKeyboardButton("…¢ ü·¥è ô·¥Ä ü", callback_data="menu_help admin_gban"),
                InlineKeyboardButton(
                    " Ä·¥ás·¥õ Ä…™·¥Ñ·¥õ", callback_data="menu_help admin_restrict"
                ),
            ],
            [InlineKeyboardButton("‚Ä¢ ·¥ã·¥á·¥ç ô·¥Ä ü…™' ‚Ä¢", callback_data="help_back")],
        ]
        back_button = [
            [InlineKeyboardButton("‚Ä¢ ·¥ã·¥á·¥ç ô·¥Ä ü…™ ‚Ä¢", callback_data="menu_help admin_back")]
        ]
        return [menu_button, back_button]

    def alive(get_id):
        button = [
            [
                InlineKeyboardButton(
                    text="üóëÔ∏è ·¥õ·¥ú·¥õ·¥ú·¥ò",
                    callback_data=f"alv_cls {int(get_id[1])} {int(get_id[2])}",
                )
            ]
        ]
        return button

    def sticker():
        menu_button = [
            [
                InlineKeyboardButton("·¥ã·¥Ä…¥…¢", callback_data="menu_help sticker_kang"),
                InlineKeyboardButton(
                    "·¥ç·¥á·¥ç…™Íú∞ è", callback_data="menu_help sticker_memify"
                ),
            ],
            [
                InlineKeyboardButton("·¥ç·¥á·¥ç·¥ás", callback_data="menu_help sticker_memes"),
                InlineKeyboardButton(
                    "«´·¥ú·¥è·¥õ ü è", callback_data="menu_help sticker_quotly"
                ),
            ],
            [
                InlineKeyboardButton("·¥õ…™…¥ è", callback_data="menu_help sticker_tiny"),
            ],
            [InlineKeyboardButton("‚Ä¢ ·¥ã·¥á·¥ç ô·¥Ä ü…™ ‚Ä¢", callback_data="help_back")],
        ]
        back_button = [
            [
                InlineKeyboardButton(
                    "‚Ä¢ ·¥ã·¥á·¥ç ô·¥Ä ü…™ ‚Ä¢", callback_data="menu_help sticker_back"
                )
            ]
        ]
        return [menu_button, back_button]

    def start():
        button = [
            [InlineKeyboardButton("üî•  ô·¥ú·¥Ä·¥õ ·¥ús·¥á Ä ô·¥è·¥õ üî•", callback_data="bahan")],
            [
                InlineKeyboardButton("üí¨  ô·¥Ä…¥·¥õ·¥ú·¥Ä…¥", callback_data="help_back"),
                InlineKeyboardButton("s·¥ú·¥ò·¥ò·¥è Ä·¥õ üí¨", callback_data="support"),
            ],
        ]
        return button

    def translate():
        button = [
            [
                InlineKeyboardButton(
                    "‚Ä¢  ü·¥Ä…¥…¢_·¥Ñ·¥è·¥Ö·¥á ‚Ä¢", url="https://graph.org/LANG-CODE-11-26"
                )
            ],
            [
                InlineKeyboardButton("‚Ä¢ ·¥ã·¥á·¥ç ô·¥Ä ü…™ ‚Ä¢", callback_data="help_back"),
            ],
        ]
        return button


class INLINE:
    def QUERY(func):
        async def wrapper(client, inline_query):
            users = ubot._get_my_id
            if inline_query.from_user.id not in users:
                await client.answer_inline_query(
                    inline_query.id,
                    cache_time=1,
                    results=[
                        (
                            InlineQueryResultArticle(
                                title=f"·¥Ä…¥·¥Ö·¥Ä  ô·¥á ü·¥ú·¥ç ·¥è Ä·¥Ö·¥á Ä @{bot.me.username}",
                                input_message_content=InputTextMessageContent(
                                    f"s…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥è Ä·¥Ö·¥á Ä ·¥Ö…™ @{bot.me.username} ·¥Ö·¥ú ü·¥ú  ô…™·¥Ä Ä  ô…™s·¥Ä ·¥ç·¥á…¥…¢…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ …™…¥ ü…™…¥·¥á …™…¥…™"
                                ),
                            )
                        )
                    ],
                )
            else:
                await func(client, inline_query)

        return wrapper

    def DATA(func):
        async def wrapper(client, callback_query):
            users = ubot._get_my_id
            if callback_query.from_user.id not in users:
                await callback_query.answer(
                    f"·¥ç·¥Ä·¥ã·¥Ä…¥ è·¥Ä ·¥è Ä·¥Ö·¥á Ä ·¥ús·¥á Ä ô·¥è·¥õ @{bot.me.username} ·¥Ö·¥ú ü·¥ú  ô…™·¥Ä Ä  ô…™s·¥Ä ·¥ã ü…™·¥ã ·¥õ·¥è·¥ç ô·¥è ü …™…¥…™",
                    True,
                )
            else:
                try:
                    await func(client, callback_query)
                except MessageNotModified:
                    await callback_query.answer("‚ùå ERROR")

        return wrapper
