from gc import get_objects

from pyrogram.types import InlineQueryResultArticle, InputTextMessageContent

from PyroUbot import *


async def addnote_cmd(client, message):
    note_name = get_arg(message)
    reply = message.reply_to_message
    if not reply:
        return await message.reply(
            " ô·¥Ä ü·¥Äs ·¥ò·¥ás·¥Ä…¥ ·¥Ö·¥Ä…¥ …¥·¥Ä·¥ç·¥Ä ·¥ò·¥Ä·¥Ö·¥Ä ·¥Ñ·¥Ä·¥õ·¥Ä·¥õ·¥Ä…¥ ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥ è…™·¥ç·¥ò·¥Ä…¥ ·¥Ñ·¥Ä·¥õ·¥Ä·¥õ·¥Ä…¥"
        )
    if await get_note(client.me.id, note_name):
        return await message.reply(f"·¥Ñ·¥Ä·¥õ·¥Ä·¥õ·¥Ä…¥ {note_name} s·¥ú·¥Ö·¥Ä ú ·¥Ä·¥Ö·¥Ä")
    copy = await client.copy_message(client.me.id, message.chat.id, reply.id)
    await save_note(client.me.id, note_name, copy.id)
    await copy.reply(f"üëÜüèª ·¥ò·¥ás·¥Ä…¥ ·¥Ö…™·¥Ä·¥õ·¥Äs …™…¥…™ ·¥ä·¥Ä…¥…¢·¥Ä…¥ ·¥Ö…™ ú·¥Ä·¥ò·¥ús ·¥Ä·¥õ·¥Ä·¥ú ·¥Ñ·¥Ä·¥õ·¥Ä·¥õ·¥Ä…¥ ·¥Ä·¥ã·¥Ä…¥  ú…™ ü·¥Ä…¥…¢ \n\nüëâüèª Ketik: <code>{PREFIX[0]}delnote {note_name}</code> ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢ ú·¥Ä·¥ò·¥ús ·¥Ñ·¥Ä·¥õ·¥Ä·¥õ·¥Ä…¥ ·¥Ö…™·¥Ä·¥õ·¥Äs",
    )
    await message.reply("·¥Ñ·¥Ä·¥õ·¥Ä·¥õ·¥Ä…¥  ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™ s…™·¥ç·¥ò·¥Ä…¥")


async def get_cmd(client, message):
    note_name = get_arg(message)
    if not note_name:
        return await message.reply("·¥Ä·¥ò·¥Ä  è·¥Ä…¥…¢ ·¥Ä…¥·¥Ö·¥Ä ·¥Ñ·¥Ä Ä…™")
    note = await get_note(client.me.id, note_name)
    if not note:
        return await message.reply(f"·¥Ñ·¥Ä·¥õ·¥Ä·¥õ·¥Ä…¥ {note_name} ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ä·¥Ö·¥Ä")
    note_id = await client.get_messages(client.me.id, note)
    if "~>" not in note_id.text or note_id.caption:
        msg = message.reply_to_message or message
        await client.copy_message(
            message.chat.id,
            client.me.id,
            note,
            reply_to_message_id=msg.id,
        )
    else:
        try:
            x = await client.get_inline_bot_results(
                bot.me.username, f"get_notes {id(message)}"
            )
            msg = message.reply_to_message or message
            await client.send_inline_bot_result(
                message.chat.id, x.query_id, x.results[0].id, reply_to_message_id=msg.id
            )
        except Exception as error:
            await message.reply(error)


async def get_notes_button(client, inline_query):
    _id = int(inline_query.query.split()[1])
    m = [obj for obj in get_objects() if id(obj) == _id][0]
    get_note_id = await get_note(m._client.me.id, m.text.split()[1])
    note_id = await m._client.get_messages(m._client.me.id, get_note_id)
    buttons, text_button = await notes_create_button(note_id.text)
    await client.answer_inline_query(
        inline_query.id,
        cache_time=0,
        results=[
            (
                InlineQueryResultArticle(
                    title="get notes!",
                    reply_markup=buttons,
                    input_message_content=InputTextMessageContent(text_button),
                )
            )
        ],
    )


async def delnote_cmd(client, message):
    note_name = get_arg(message)
    if not note_name:
        return await message.reply("·¥Ä·¥ò·¥Ä  è·¥Ä…¥…¢ …™…¥…¢…™…¥ ·¥Ä…¥·¥Ö·¥Ä  ú·¥Ä·¥ò·¥ús?")
    note = await get_note(client.me.id, note_name)
    if not note:
        return await message.reply(f"·¥Ñ·¥Ä·¥õ·¥Ä·¥õ·¥Ä…¥ {note_name} ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ä·¥Ö·¥Ä")
    await rm_note(client.me.id, note_name)
    await message.reply(f" ô·¥á Ä ú·¥Äs…™ ü ·¥ç·¥á…¥…¢ ú·¥Ä·¥ò·¥ús ·¥Ñ·¥Ä·¥õ·¥Ä·¥õ·¥Ä…¥ {note_name}")
    await client.delete_messages(client.me.id, [int(note), int(note) + 1])


async def notes_cmd(client, message):
    msg = f"üìù ·¥Ö·¥ÄÍú∞·¥õ·¥Ä Ä ·¥Ñ·¥Ä·¥õ·¥Ä·¥õ·¥Ä…¥ {client.me.first_name} {client.me.last_name or ''}\n\n"
    for notes in await all_notes(client.me.id):
        msg += f"‚Ä¢ {notes}\n"
    await message.reply(msg)
