import asyncio
import importlib
from datetime import datetime
from time import time

from pyrogram.enums import SentCodeType
from pyrogram.errors import *
from pyrogram.types import *

from PyroUbot import *


async def need_api(client, callback_query):
    user_id = callback_query.from_user.id
    if len(ubot._ubot) > MAX_BOT:
        buttons = [
            [InlineKeyboardButton("üóëÔ∏è ·¥õ·¥ú·¥õ·¥ú·¥ò üóëÔ∏è", callback_data="0_cls")],
        ]
        await callback_query.message.delete()
        return await bot.send_message(
            user_id,
            f"""
<b>‚ùå ·¥õ…™·¥Ö·¥Ä·¥ã  ô…™s·¥Ä ·¥ç·¥á·¥ç ô·¥ú·¥Ä·¥õ ·¥ús·¥á Ä ô·¥è·¥õ!</b>

<b>üìö ·¥ã·¥Ä Ä·¥á…¥·¥Ä ·¥ç·¥Ä·¥ãs…™·¥ç·¥Ä ü ·¥ús·¥á Ä ô·¥è·¥õ ·¥Ä·¥Ö·¥Ä ü·¥Ä ú {Fonts.smallcap(str(len(ubot._ubot)))} ·¥õ·¥á ü·¥Ä ú ·¥õ·¥á Ä·¥Ñ·¥Ä·¥ò·¥Ä…™</b>

<b>‚òéÔ∏è s…™ ü·¥Ä ú·¥ã·¥Ä…¥  ú·¥ú ô·¥ú…¥…¢…™: <a href=t.me/T0M1_X>·¥Ä·¥Ö·¥ç…™…¥</a> ·¥ä…™·¥ã·¥Ä ·¥ç·¥Ä·¥ú ·¥Ö…™ ô·¥ú·¥Ä·¥õ·¥ã·¥Ä…¥  ô·¥è·¥õ s·¥á·¥ò·¥á Ä·¥õ…™ s·¥Ä è·¥Ä</b>
""",
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    if user_id not in await get_prem():
        buttons = [
            [InlineKeyboardButton("‚û°Ô∏è  ü·¥Ä…¥·¥ä·¥ú·¥õ·¥ã·¥Ä…¥", callback_data="bayar_dulu")],
            [InlineKeyboardButton("‚ùå  ô·¥Ä·¥õ·¥Ä ü·¥ã·¥Ä…¥", callback_data=f"home {user_id}")],
        ]
        await callback_query.message.delete()
        return await bot.send_message(
            user_id,
            MSG.POLICY(),
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    else:
        await bikin_ubot(client, callback_query)


async def payment_userbot(client, callback_query):
    user_id = callback_query.from_user.id
    buttons = Button.plus_minus(1, user_id)
    await callback_query.message.delete()
    return await bot.send_message(
        user_id,
        MSG.TEXT_PAYMENT(25, 25, 1),
        disable_web_page_preview=True,
        reply_markup=InlineKeyboardMarkup(buttons),
    )


async def bikin_ubot(client, callback_query):
    user_id = callback_query.from_user.id
    try:
        await callback_query.message.delete()
        phone = await bot.ask(
            user_id,
            (
                "<b>s…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ç·¥Äs·¥ú·¥ã·¥ã·¥Ä…¥ …¥·¥è·¥ç·¥è Ä ·¥õ·¥á ü·¥á·¥ò·¥è…¥ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥Ä…¥·¥Ö·¥Ä ·¥Ö·¥á…¥…¢·¥Ä…¥ Íú∞·¥è Ä·¥ç·¥Ä·¥õ ·¥ã·¥è·¥Ö·¥á …¥·¥á…¢·¥Ä Ä·¥Ä.\n·¥Ñ·¥è…¥·¥õ·¥è ú: +628xxxxxxx</b>\n"
                "\n<b>…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ /cancel ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥ã·¥Ä…¥ ·¥ò Ä·¥ès·¥ás ·¥ç·¥á·¥ç ô·¥ú·¥Ä·¥õ ·¥ús·¥á Ä ô·¥è·¥õ</b>"
            ),
            timeout=300,
        )
    except asyncio.TimeoutError:
        return await bot.send_message(user_id, "·¥ò·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥Ä…¥ ·¥è·¥õ·¥è·¥ç·¥Ä·¥õ…™s")
    if await is_cancel(callback_query, phone.text):
        return
    phone_number = phone.text
    new_client = Ubot(
        name=str(callback_query.id),
        api_id=API_ID,
        api_hash=API_HASH,
        in_memory=False,
    )
    get_otp = await bot.send_message(user_id, "<b>·¥ç·¥á…¥…¢…™ Ä…™·¥ç ·¥ã·¥è·¥Ö·¥á ·¥è·¥õ·¥ò...</b>")
    await new_client.connect()
    try:
        code = await new_client.send_code(phone_number.strip())
    except ApiIdInvalid as AID:
        await get_otp.delete()
        return await bot.send_message(user_id, AID)
    except PhoneNumberInvalid as PNI:
        await get_otp.delete()
        return await bot.send_message(user_id, PNI)
    except PhoneNumberFlood as PNF:
        await get_otp.delete()
        return await bot.send_message(user_id, PNF)
    except PhoneNumberBanned as PNB:
        await get_otp.delete()
        return await bot.send_message(user_id, PNB)
    except PhoneNumberUnoccupied as PNU:
        await get_otp.delete()
        return await bot.send_message(user_id, PNU)
    except Exception as error:
        await get_otp.delete()
        return await bot.send_message(user_id, f"<b>ERROR:</b> {error}")
    try:
        sent_code = {
            SentCodeType.APP: "<a href=tg://openmessage?user_id=777000>·¥Ä·¥ã·¥ú…¥ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç</a>  Ä·¥ás·¥ç…™",
            SentCodeType.SMS: "s·¥çs ·¥Ä…¥·¥Ö·¥Ä",
            SentCodeType.CALL: "·¥ò·¥Ä…¥…¢…¢…™ ü·¥Ä…¥ ·¥õ·¥á ü·¥ò·¥è…¥",
            SentCodeType.FLASH_CALL: "·¥ò·¥Ä…¥…¢…¢…™ ü·¥Ä…¥ ·¥ã…™ ü·¥Ä·¥õ ·¥õ·¥á ü·¥á·¥ò·¥è…¥",
            SentCodeType.FRAGMENT_SMS: "Íú∞ Ä·¥Ä…¢·¥ç·¥á…¥·¥õ s·¥çs",
            SentCodeType.EMAIL_CODE: "·¥á·¥ç·¥Ä…™ ü ·¥Ä…¥·¥Ö·¥Ä",
        }
        await get_otp.delete()
        otp = await bot.ask(
            user_id,
            (
                f"<b>s…™ ü·¥Ä·¥ã·¥Ä…¥ ·¥ò·¥á Ä…™·¥ãs·¥Ä ·¥ã·¥è·¥Ö·¥á ·¥è·¥õ·¥ò ·¥Ö·¥Ä Ä…™ {sent_code[code.type]}. ·¥ã…™ Ä…™·¥ç ·¥ã·¥è·¥Ö·¥á ·¥è·¥õ·¥ò ·¥ã·¥á s…™…¥…™ s·¥á·¥õ·¥á ü·¥Ä ú ·¥ç·¥á·¥ç ô·¥Ä·¥Ñ·¥Ä Íú∞·¥è Ä·¥ç·¥Ä·¥õ ·¥Ö…™  ô·¥Ä·¥°·¥Ä ú …™…¥…™.</b>\n"
                "\n·¥ä…™·¥ã·¥Ä ·¥ã·¥è·¥Ö·¥á ·¥è·¥õ·¥ò ·¥Ä·¥Ö·¥Ä ü·¥Ä ú <·¥Ñ·¥è·¥Ö·¥á>12345</·¥Ñ·¥è·¥Ö·¥á> ·¥õ·¥è ü·¥è…¥…¢ <b>[ ·¥õ·¥Ä·¥ç ô·¥Ä ú·¥ã·¥Ä…¥ s·¥ò·¥Äs…™ ]</b> ·¥ã…™ Ä…™·¥ç·¥ã·¥Ä…¥ s·¥á·¥ò·¥á Ä·¥õ…™ …™…¥…™ <code>1 2 3 4 5</code>\n"
                "\n<b>…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ /cancel ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥ã·¥Ä…¥ ·¥ò Ä·¥ès·¥ás ·¥ç·¥á·¥ç ô·¥ú·¥Ä·¥õ ·¥ús·¥á Ä ô·¥è·¥õ</b>"
            ),
            timeout=300,
        )
    except asyncio.TimeoutError:
        return await bot.send_message(user_id, "·¥°·¥Ä·¥ã·¥õ·¥ú ·¥õ·¥á ü·¥Ä ú  ú·¥Ä ô…™s")
    if await is_cancel(callback_query, otp.text):
        return
    otp_code = otp.text
    try:
        await new_client.sign_in(
            phone_number.strip(),
            code.phone_code_hash,
            phone_code=" ".join(str(otp_code)),
        )
    except PhoneCodeInvalid as PCI:
        return await bot.send_message(user_id, PCI)
    except PhoneCodeExpired as PCE:
        return await bot.send_message(user_id, PCE)
    except BadRequest as error:
        return await bot.send_message(user_id, f"<b>ERROR:</b> {error}")
    except SessionPasswordNeeded:
        try:
            two_step_code = await bot.ask(
                user_id,
                "<b>·¥Ä·¥ã·¥ú…¥ ·¥Ä…¥·¥Ö·¥Ä ·¥õ·¥á ü·¥Ä ú ·¥ç·¥á…¥…¢·¥Ä·¥ã·¥õ…™Íú∞·¥ã·¥Ä…¥ ·¥†·¥á Ä…™Íú∞…™·¥ã·¥Äs…™ ·¥Ö·¥ú·¥Ä  ü·¥Ä…¥…¢·¥ã·¥Ä ú. s…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ã…™ Ä…™·¥ç·¥ã·¥Ä…¥ ·¥ò·¥Äss·¥°·¥è Ä·¥Ö…¥ è·¥Ä.\n\n…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ /cancel ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥ã·¥Ä…¥ ·¥ò Ä·¥ès·¥ás ·¥ç·¥á·¥ç ô·¥ú·¥Ä·¥õ ·¥ús·¥á Ä ô·¥è·¥õ</b>",
                timeout=300,
            )
        except asyncio.TimeoutError:
            return await bot.send_message(user_id, "·¥ò·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥Ä…¥ ·¥è·¥õ·¥è·¥ç·¥Ä·¥õ…™s")
        if await is_cancel(callback_query, two_step_code.text):
            return
        new_code = two_step_code.text
        try:
            await new_client.check_password(new_code)
        except Exception as error:
            return await bot.send_message(user_id, f"<b>ERROR:</b> {error}")
    session_string = await new_client.export_session_string()
    await new_client.disconnect()
    new_client.storage.session_string = session_string
    new_client.in_memory = False
    bot_msg = await bot.send_message(
        user_id,
        "s·¥á·¥Ö·¥Ä…¥…¢ ·¥ç·¥á·¥ç·¥ò Ä·¥ès·¥ás....\n\ns…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥õ·¥ú…¥…¢…¢·¥ú s·¥á ô·¥á…¥·¥õ·¥Ä Ä",
        disable_web_page_preview=True,
    )
    await new_client.start()
    await add_ubot(
        user_id=int(new_client.me.id),
        api_id=API_ID,
        api_hash=API_HASH,
        session_string=session_string,
    )
    await set_uptime(new_client.me.id, time())
    for id_maker in [user_id, new_client.me.id]:
        try:
            if id_maker not in await get_seles():
                await remove_prem(id_maker)
        except:
            pass
    for mod in loadModule():
        importlib.reload(importlib.import_module(f"PyroUbot.modules.{mod}"))
    text_done = f"<b>üî• {bot.me.mention}  ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™·¥Ä·¥ã·¥õ…™Íú∞·¥ã·¥Ä…¥ ·¥Ö…™ ·¥Ä·¥ã·¥ú…¥: <a href=tg://openmessage?user_id={new_client.me.id}>{new_client.me.first_name} {new_client.me.last_name or ''}</a> > <code>{new_client.me.id}</code></b> "
    await bot_msg.edit(text_done)
    try:
        await new_client.join_chat("PremUbotCH")
    except UserAlreadyParticipant:
        pass
    return await bot.send_message(
        LOGS_MAKER_UBOT,
        f"""
<b>‚ùè ·¥ús·¥á Ä ô·¥è·¥õ ·¥Ö…™·¥Ä·¥ã·¥õ…™“ì·¥ã·¥Ä…¥</b>
<b> ‚îú ·¥Ä·¥ã·¥ú…¥:</b> <a href=tg://user?id={new_client.me.id}>{new_client.me.first_name} {new_client.me.last_name or ''}</a> 
<b> ‚ï∞ …™·¥Ö:</b> <code>{new_client.me.id}</code>
""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üìÅ ·¥Ñ·¥á·¥ã ·¥ç·¥Äs·¥Ä ·¥Ä·¥ã·¥õ…™“ì üìÅ",
                        callback_data=f"cek_masa_aktif {new_client.me.id}",
                    )
                ],
            ]
        ),
        disable_web_page_preview=True,
    )


async def cek_ubot(client, callback_query):
    count = 0
    for X in ubot._ubot:
        count += 1
        expired_date = await get_expired_date(X.me.id)
        user = f"""
<b>‚ùè ·¥ús·¥á Ä ô·¥è·¥õ ·¥ã·¥á</b> <code>{count}</code>
<b> ‚îú ·¥Ä·¥ã·¥ú…¥:</b> <a href=tg://user?id={X.me.id}>{X.me.first_name} {X.me.last_name or ''}</a> 
<b> ‚îú …™·¥Ö:</b> <code>{X.me.id}</code>
<b> ‚ï∞ ·¥áx·¥ò…™ Ä·¥á·¥Ö</b> <code>{expired_date.strftime('%d-%m-%Y')}</code>
"""
        await bot.send_message(
            callback_query.from_user.id,
            user,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "üìÅ  ú·¥Ä·¥ò·¥ús ·¥Ö·¥Ä Ä…™ ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á üìÅ",
                            callback_data=f"del_ubot {X.me.id}",
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            "üìÅ ·¥Ñ·¥á·¥ã ·¥ç·¥Äs·¥Ä ·¥Ä·¥ã·¥õ…™“ì üìÅ",
                            callback_data=f"cek_masa_aktif {X.me.id}",
                        )
                    ],
                ]
            ),
        )
        await asyncio.sleep(1)


async def cek_userbot_expired(client, callback_query):
    user_id = int(callback_query.data.split()[1])
    expired = await get_expired_date(user_id)
    try:
        xxxx = (expired - datetime.now()).days
        return await callback_query.answer(f"‚è≥ ·¥õ…™…¥…¢…¢·¥Ä ü {xxxx}  ú·¥Ä Ä…™  ü·¥Ä…¢…™", True)
    except:
        return await callback_query.answer("‚úÖ s·¥ú·¥Ö·¥Ä ú ·¥õ…™·¥Ö·¥Ä·¥ã ·¥Ä·¥ã·¥õ…™“ì", True)


async def hapus_ubot(client, callback_query):
    user_id = callback_query.from_user.id
    if not user_id == OWNER_ID:
        return await callback_query.answer(
            f"‚ùå ·¥õ·¥è·¥ç ô·¥è ü …™…¥…™  ô·¥ú·¥ã·¥Ä…¥ ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥ú {callback_query.from_user.first_name} {callback_query.from_user.last_name or ''}",
            True,
        )
    try:
        show = await bot.get_users(callback_query.data.split()[1])
        get_id = show.id
        get_mention = f"<a href=tg://user?id={get_id}>{show.first_name} {show.last_name or ''}</a>"
    except Exception:
        get_id = int(callback_query.data.split()[1])
        get_mention = f"<a href=tg://user?id={get_id}>Userbot</a>"
    for X in ubot._ubot:
        if get_id == X.me.id:
            await X.unblock_user(bot.me.username)
            for chat in await get_chat(X.me.id):
                await remove_chat(X.me.id, chat)
            await rm_all(X.me.id)
            await rem_pref(X.me.id)
            await remove_ubot(X.me.id)
            await rem_uptime(X.me.id)
            await rem_expired_date(X.me.id)
            ubot._get_my_id.remove(X.me.id)
            ubot._ubot.remove(X)
            await X.log_out()
            await bot.send_message(
                OWNER_ID, f"<b> ‚úÖ {get_mention}  ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™ ú·¥Ä·¥ò·¥ús ·¥Ö·¥Ä Ä…™ ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á</b>"
            )
            await bot.send_message(
                LOGS_MAKER_UBOT,
                MSG.EXPIRED_MSG_BOT(X),
                reply_markup=InlineKeyboardMarkup(Button.expired_button_bot()),
            )
            return await bot.send_message(
                X.me.id, "<b>üí¨ ·¥ç·¥Äs·¥Ä ·¥Ä·¥ã·¥õ…™Íú∞ ·¥Ä…¥·¥Ö·¥Ä ·¥õ·¥á ü·¥Ä ú  ô·¥á Ä·¥Ä·¥ã ú…™ Ä"
            )


async def is_cancel(callback_query, text):
    if text.startswith("/cancel"):
        await bot.send_message(
            callback_query.from_user.id, "<b>·¥ç·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥ã·¥Ä…¥ ·¥ò Ä·¥ès·¥ás!</b>"
        )
        return True
    return False
