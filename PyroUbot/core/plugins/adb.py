import asyncio
import importlib
from datetime import datetime, timedelta

from pyrogram.enums import SentCodeType
from pyrogram.errors import *
from pyrogram.types import *
from pytz import timezone

from PyroUbot import *


async def need_api(client, callback_query):
    user_id = callback_query.from_user.id
    buttons = [
        [InlineKeyboardButton("‚û°Ô∏è  ü·¥Ä…¥·¥ä·¥ú·¥õ·¥ã·¥Ä…¥", callback_data="add_ubot")],
    ]
    await callback_query.message.delete()
    return await bot.send_message(
        user_id,
        """
<b>‚úÖ ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á·¥ç ô·¥ú·¥Ä·¥õ ·¥ús·¥á Ä ô·¥è·¥õ s…™·¥Ä·¥ò·¥Ä·¥ã·¥Ä ú  ô·¥Ä ú·¥Ä…¥  ô·¥á Ä…™·¥ã·¥ú·¥õ

    ‚Ä¢ <code>·¥Ä·¥ò…™_…™·¥Ö</code>: ·¥Ö·¥Ä·¥ò·¥Ä·¥õ·¥ã·¥Ä…¥ ·¥Ö·¥Ä Ä…™ my.telegram.org
    ‚Ä¢ <code>·¥Ä·¥ò…™_ ú·¥Äs ú</code>: ·¥Ö·¥Ä·¥ò·¥Ä·¥õ·¥ã·¥Ä…¥ ·¥Ö·¥Ä Ä…™ my.telegram.org
    ‚Ä¢ <code>·¥ò ú·¥è…¥·¥á_…¥·¥ú·¥ç ô·¥á Ä</code>: …¥·¥è·¥ç·¥á Ä  ú·¥ò ·¥Ä·¥ã·¥ú…¥ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç

‚òëÔ∏è ·¥ä…™·¥ã·¥Ä s·¥ú·¥Ö·¥Ä ú ·¥õ·¥á Äs·¥á·¥Ö…™·¥Ä s…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ã ü…™·¥ã ·¥õ·¥è·¥ç ô·¥è…™ ·¥Ö…™ ô·¥Ä·¥°·¥Ä ú</b>
""",
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(buttons),
        )


async def bikin_ubot(client, callback_query):
    user_id = callback_query.from_user.id
    PREM_ID = await get_prem()
    ID_SELES = await get_seles()
    if len(ubot._ubot) == MAX_BOT:
        buttons = [
            [InlineKeyboardButton("üóëÔ∏è Tutup üóëÔ∏è", callback_data="0_cls")],
        ]
        await callback_query.message.delete()
        return await bot.send_message(
            user_id,
            f"""
<b>‚ùå ·¥õ…™·¥Ö·¥Ä·¥ã  ô…™s·¥Ä ·¥ç·¥á·¥ç ô·¥ú·¥Ä·¥õ ·¥ús·¥á Ä ô·¥è·¥õ!</b>

<b>üìö ·¥ã·¥Ä Ä·¥á…¥·¥Ä ·¥ç·¥Ä·¥ãs…™·¥ç·¥Ä ü ·¥ús·¥á Ä ô·¥è·¥õ ·¥Ä·¥Ö·¥Ä ü·¥Ä ú {MAX_UBOT} ·¥õ·¥á ü·¥Ä ú ·¥õ·¥á Ä·¥Ñ·¥Ä·¥ò·¥Ä…™</b>

<b>‚òéÔ∏è s…™ ü·¥Ä ú·¥ã·¥Ä…¥  ú·¥ú ô·¥ú…¥…¢…™: <a href=t.me/T0M1_X>·¥Ä·¥Ö·¥ç…™…¥</a> ·¥ä…™·¥ã·¥Ä ·¥ç·¥Ä·¥ú ·¥Ö…™ ô·¥ú·¥Ä·¥õ·¥ã·¥Ä…¥  ô·¥è·¥õ s·¥á·¥ò·¥á Ä·¥õ…™ s·¥Ä è·¥Ä</b>
""",
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    elif user_id not in PREM_ID:
        buttons = [[InlineKeyboardButton("‚úÖ ·¥ã·¥è…¥Íú∞…™ Ä·¥ç·¥Äs…™", callback_data="confirm")]]
        await callback_query.message.delete()
        return await bot.send_message(
            user_id,
            TEXT_PAYMENT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(buttons),
        )
    try:
        await callback_query.message.delete()
        api = await bot.ask(
            user_id,
            (
                "<b>s…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ç·¥Äs·¥ú·¥ã·¥ã·¥Ä…¥ ·¥Ä·¥ò…™_…™·¥Ö</b>\n"
                "\n<b>…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ /cancel ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥ã·¥Ä…¥ ·¥ò Ä·¥ès·¥ás ·¥ç·¥á·¥ç ô·¥ú·¥Ä·¥õ ·¥ús·¥á Ä ô·¥è·¥õ</b>"
            ),
            timeout=300,
        )
    except asyncio.TimeoutError:
        return await bot.send_message(user_id, "·¥°·¥Ä·¥ã·¥õ·¥ú ·¥õ·¥á ü·¥Ä ú  ú·¥Ä ô…™s")
    if await is_cancel(callback_query, api.text):
        return
    api_ids = api.text
    try:
        hash = await bot.ask(
            user_id,
            (
                "<b>s…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ç·¥Äs·¥ú·¥ã·¥ã·¥Ä…¥ ·¥Ä·¥ò…™_ ú·¥Äs ú</b>\n"
                "\n<b>…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ /cancel ·¥ú…¥·¥õ·¥ú·¥ã ·¥ò Ä·¥ès·¥ás ·¥ç·¥á·¥ç ô·¥ú·¥Ä·¥õ ·¥ús·¥á Ä ô·¥è·¥õ</b>"
            ),
            timeout=300,
        )
    except asyncio.TimeoutError:
        return await bot.send_message(user_id, "·¥°·¥Ä·¥ã·¥õ·¥ú ·¥õ·¥á ü·¥Ä ú  ú·¥Ä ô…™s")
    if await is_cancel(callback_query, hash.text):
        return
    api_hashs = hash.text
    try:
        phone = await bot.ask(
            user_id,
            (
                "<b>s…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ç·¥Äs·¥ú·¥ã·¥ã·¥Ä…¥ …¥·¥è·¥ç·¥è Ä ·¥õ·¥á ü·¥á·¥ò·¥è…¥ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥Ä…¥·¥Ö·¥Ä ·¥Ö·¥á…¥…¢·¥Ä…¥ Íú∞·¥è Ä·¥ç·¥Ä·¥õ ·¥ã·¥è·¥Ö·¥á …¥·¥á…¢·¥Ä Ä·¥Ä.\…¥·¥Ñ·¥è…¥·¥õ·¥è ú: +628xxxxxxx</ ô>\n"
                "\n<b>…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ /cancel ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥ã·¥Ä…¥ ·¥ò Ä·¥ès·¥ás ·¥ç·¥á·¥ç ô·¥ú·¥Ä·¥õ ·¥ús·¥á Ä ô·¥è·¥õ</b>"
            ),
            timeout=300,
        )
    except asyncio.TimeoutError:
        return await bot.send_message(user_id, "waktu Telah Habis")
    if await is_cancel(callback_query, phone.text):
        return
    phone_number = phone.text
    new_client = Ubot(
        name=str(callback_query.id),
        api_id=api_ids,
        api_hash=api_hashs,
        in_memory=False,
    )
    get_otp = await bot.send_message(user_id, "<b>Mengirim Kode OTP...</b>")
    await new_client.connect()
    try:
        code = await new_client.send_code(phone_number.strip())
    except ApiIdInvalid as AID:
        await get_otp.delete()
        return await bot.send_message(user_id, AID)
    except PhoneNumberInvalid as PNI:
        await get_otp.delete()
        return await bot.send_message(user_id, PNI)
    except PhoneNumberFlood as PNF:
        await get_otp.delete()
        return await bot.send_message(user_id, PNF)
    except PhoneNumberBanned as PNB:
        await get_otp.delete()
        return await bot.send_message(user_id, PNB)
    except PhoneNumberUnoccupied as PNU:
        await get_otp.delete()
        return await bot.send_message(user_id, PNU)
    except Exception as error:
        await get_otp.delete()
        return await bot.send_message(user_id, f"<b>ERROR:</b> {error}")
    try:
        sent_code = {
            SentCodeType.APP: "<a href=tg://openmessage?user_id=777000>·¥Ä·¥ã·¥ú…¥ ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç</a>  Ä·¥ás·¥ç…™",
            SentCodeType.SMS: "s·¥çs ·¥Ä…¥·¥Ö·¥Ä",
            SentCodeType.CALL: "·¥ò·¥Ä…¥…¢…¢…™ ü·¥Ä…¥ ·¥õ·¥á ü·¥ò·¥è…¥",
            SentCodeType.FLASH_CALL: "·¥ò·¥Ä…¥…¢…¢…™ ü·¥Ä…¥ ·¥ã…™ ü·¥Ä·¥õ ·¥õ·¥á ü·¥á·¥ò·¥è…¥",
            SentCodeType.FRAGMENT_SMS: "Íú∞ Ä·¥Ä…¢·¥ç·¥á…¥·¥õ s·¥çs",
            SentCodeType.EMAIL_CODE: "·¥á·¥ç·¥Ä…™ ü ·¥Ä…¥·¥Ö·¥Ä",
        }
        await get_otp.delete()
        otp = await bot.ask(
            user_id,
            (
                f"<b>s…™ ü·¥Ä·¥ã·¥Ä…¥ ·¥ò·¥á Ä…™·¥ãs·¥Ä ·¥ã·¥è·¥Ö·¥á ·¥è·¥õ·¥ò ·¥Ö·¥Ä Ä…™ {send_code[code.type]}. ·¥ã…™ Ä…™·¥ç ·¥ã·¥è·¥Ö·¥á ·¥è·¥õ·¥ò ·¥ã·¥á s…™…¥…™ s·¥á·¥õ·¥á ü·¥Ä ú ·¥ç·¥á·¥ç ô·¥Ä·¥Ñ·¥Ä Íú∞·¥è Ä·¥ç·¥Ä·¥õ ·¥Ö…™  ô·¥Ä·¥°·¥Ä ú …™…¥…™.</b>\n"
                "\n·¥ä…™·¥ã·¥Ä ·¥ã·¥è·¥Ö·¥á ·¥è·¥õ·¥ò ·¥Ä·¥Ö·¥Ä ü·¥Ä ú <·¥Ñ·¥è·¥Ö·¥á>12345</·¥Ñ·¥è·¥Ö·¥á> ·¥õ·¥è ü·¥è…¥…¢ <b>[ ·¥õ·¥Ä·¥ç ô·¥Ä ú·¥ã·¥Ä…¥ s·¥ò·¥Äs…™ ]</b> ·¥ã…™ Ä…™·¥ç·¥ã·¥Ä…¥ s·¥á·¥ò·¥á Ä·¥õ…™ …™…¥…™ <code>1 2 3 4 5</code>\…¥"
                "\n<b>…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ /cancel ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥ã·¥Ä…¥ ·¥ò Ä·¥ès·¥ás ·¥ç·¥á·¥ç ô·¥ú·¥Ä·¥õ ·¥ús·¥á Ä ô·¥è·¥õ</b>"
            ),
            timeout=300,
        )
    except asyncio.TimeoutError:
        return await bot.send_message(user_id, "·¥°·¥Ä·¥ã·¥õ·¥ú ·¥õ·¥á ü·¥Ä ú  ú·¥Ä ô…™s")
    if await is_cancel(callback_query, otp.text):
        return
    otp_code = otp.text
    try:
        await new_client.sign_in(
            phone_number.strip(),
            code.phone_code_hash,
            phone_code=" ".join(str(otp_code)),
        )
    except PhoneCodeInvalid as PCI:
        return await bot.send_message(user_id, PCI)
    except PhoneCodeExpired as PCE:
        return await bot.send_message(user_id, PCE)
    except BadRequest as error:
        return await bot.send_message(user_id, f"<b>ERROR:</b> {error}")
    except SessionPasswordNeeded:
        try:
            two_step_code = await bot.ask(
                user_id,
                "<b>·¥Ä·¥ã·¥ú…¥ ·¥Ä…¥·¥Ö·¥Ä ·¥õ·¥á ü·¥Ä ú ·¥ç·¥á…¥…¢·¥Ä·¥ã·¥õ…™Íú∞·¥ã·¥Ä…¥ ·¥†·¥á Ä…™Íú∞…™·¥ã·¥Äs…™ ·¥Ö·¥ú·¥Ä  ü·¥Ä…¥…¢·¥ã·¥Ä ú. s…™ ü·¥Ä ú·¥ã·¥Ä…¥ ·¥ã…™ Ä…™·¥ç·¥ã·¥Ä…¥ ·¥ò·¥Äss·¥°·¥è Ä·¥Ö…¥ è·¥Ä.\n\n…¢·¥ú…¥·¥Ä·¥ã·¥Ä…¥ /cancel ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥ã·¥Ä…¥ ·¥ò Ä·¥ès·¥ás ·¥ç·¥á·¥ç ô·¥ú·¥Ä·¥õ ·¥ús·¥á Ä ô·¥è·¥õ</b>",
                timeout=300,
            )
        except asyncio.TimeoutError:
            return await bot.send_message(user_id, "Batas waktu tercapai 5 menit.")
        if await is_cancel(callback_query, two_step_code.text):
            return
        new_code = two_step_code.text
        try:
            await new_client.check_password(new_code)
        except Exception as error:
            return await bot.send_message(user_id, f"<b>ERROR:</b> {error}")
    session_string = await new_client.export_session_string()
    await new_client.disconnect()
    new_client.storage.session_string = session_string
    new_client.in_memory = False
    await new_client.start()
    await add_ubot(
        user_id=int(new_client.me.id),
        api_id=api_ids,
        api_hash=api_hashs,
        session_string=session_string,
    )
    for mod in loadModule():
        importlib.reload(importlib.import_module(f"PyroUbot.modules.{mod}"))
    text_done = f"<b>üî• {bot.me.mention}  ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™·¥Ä·¥ã·¥õ…™Íú∞·¥ã·¥Ä…¥ ·¥Ö…™ ·¥Ä·¥ã·¥ú…¥: <a href=tg://openmessage?user_id={new_client.me.id}>{new_client.me.first_name} {new_client.me.last_name or ''}</a> > <code>{new_client.me.id}</code></b> "
    await bot.send_message(
        user_id,
        text_done,
        disable_web_page_preview=True,
    )
    now = datetime.now(timezone("Asia/Jakarta"))
    date = now.strftime("%d-%m-%Y")
    expire_date = now + timedelta(days=30)
    await set_expired_date(new_client.me.id, expire_date)
    get_exp = await get_expired_date(new_client.me.id)
    exp = get_exp.strftime("%d-%m-%Y")
    buttons = [
        [
            InlineKeyboardButton(
                "üìÅ  ú·¥Ä·¥ò·¥ús ·¥Ö·¥Ä Ä…™ ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á üìÅ",
                callback_data=f"del_ubot {new_client.me.id}",
            )
        ],
    ]
    await bot.send_message(
        LOGS_MAKER_UBOT,
        f"{text_done}\n<b>üóìÔ∏è ·¥ç·¥ú ü·¥Ä…™: {date}</b>\n<b>üóìÔ∏è ·¥Ä·¥ã ú…™ Ä: {exp}</b>",
        reply_markup=InlineKeyboardMarkup(buttons),
        disable_web_page_preview=True,
    )
    if callback_query.from_user.id in ID_SELES:
        return
    else:
        await remove_prem(callback_query.from_user.id)


async def cek_ubot(client, message):
    if not message.from_user.id == OWNER_ID:
        return
    count = 0
    user = ""
    for X in ubot._ubot:
        count += 1
        user += f"""
<b>‚ùè ·¥ús·¥á Ä ô·¥è·¥õ ·¥ã·¥á</b> <code>{count}</code>
<b> ‚îú ·¥Ä·¥ã·¥ú…¥:</b> <a href=tg://user?id={X.me.id}>{X.me.first_name} {X.me.last_name or ''}</a> 
<b> ‚ï∞ …™·¥Ö:</b> <code>{X.me.id}</code>
"""
        buttons = [
            [
                InlineKeyboardButton(
                    "üìÅ  ú·¥Ä·¥ò·¥ús ·¥Ö·¥Ä Ä…™ ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á üìÅ",
                    callback_data=f"del_ubot {X.me.id}",
                )
            ],
        ]
        await message.reply(user, reply_markup=InlineKeyboardMarkup(buttons))


async def hapus_ubot(client, callback_query):
    user_id = callback_query.from_user.id
    if not user_id == OWNER_ID:
        return
    try:
        show = await bot.get_users(callback_query.data.split()[1])
        get_id = show.id
        get_mention = f"<a href=tg://user?id={get_id}>{show.first_name} {show.last_name or ''}</a>"
    except BadRequest:
        get_id = int(callback_query.data.split()[1])
        get_mention = f"<a href=tg://user?id={get_id}>Userbot</a>"
    for X in ubot._ubot:
        if get_id == X.me.id:
            await X.log_out()
            ubot._ubot.remove(X)
            await rm_all(get_id)
            X._get_my_id.remove(get_id)
            await remove_ubot(get_id)
            await rem_expired_date(get_id)
            await bot.send_message(
                OWNER_ID, f"<b> ‚úÖ {get_mention}  ô·¥á Ä ú·¥Äs…™ ü ·¥Ö…™ ú·¥Ä·¥ò·¥ús ·¥Ö·¥Ä Ä…™ ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á</b>"
            )
            return await bot.send_message(get_id, "<b>üí¨ ·¥ç·¥Äs·¥Ä ·¥Ä·¥ã·¥õ…™Íú∞ ·¥Ä…¥·¥Ö·¥Ä ·¥õ·¥á ü·¥Ä ú  ô·¥á Ä·¥Ä·¥ã ú…™ Ä")


async def is_cancel(callback_query, text):
    if text.startswith("/cancel"):
        await bot.send_message(
            callback_query.from_user.id, "<b>·¥ç·¥á·¥ç ô·¥Ä·¥õ·¥Ä ü·¥ã·¥Ä…¥ ·¥ò Ä·¥ès·¥ás!</b>"
        )
        return True
    return False
