class abc:
    def command_filter(self, cmds):
        async def func(_, client: Client, message: Message):
            if message.text and message.from_user:
                prefix = await self.get_prefix(message.from_user.id)
                case_sensitive = False
                text = message.text.strip()
                matched_prefix = next((p for p in prefix if text.startswith(p)), None)
                if matched_prefix:
                    without_prefix = text[len(matched_prefix):].strip()
                        cmd_re = re.compile(r"([\"'])(.*?)(?<!\\)\1|(\S+)")
                    username = client.me.username or ""
                    commands = {cmds.lower() if not case_sensitive else cmd for cmd in [cmd]}
                    for cmd in commands:
                        if not re.match(rf"^(?:{cmd}(?:@?{username})?)(?:\s|$)", without_prefix,
                                        flags=re.IGNORECASE if not case_sensitive else 0):
                            continue
                        without_command = re.sub(rf"{cmd}(?:@?{username})?\s?", "", without_prefix, count=1,
                                             flags=re.IGNORECASE if not case_sensitive else 0)
                        message.command = [cmd] + [
                            re.sub(r"\\([\"'])", r"\1", m.group(2) or m.group(3) or "")
                            for m in cmd_re.finditer(without_command)
                        ]
                        return True
            return False

        return filters.create(func)
